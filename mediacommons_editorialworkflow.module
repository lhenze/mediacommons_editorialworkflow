<?php

function mediacommons_editorialworkflow_init() {
	
  $path_is_admin = path_is_admin(current_path());
  
  if ($path_is_admin) {

    global $user;

    $menu_object = menu_get_object();
    
    $user->contribute = array(
      'hubs_can_contribute' => mediacommons_editorialworkflow_hubs_user_can_contribute(),
      'spokes_can_contribute' => mediacommons_editorialworkflow_contributor(),
    );
    
    if (isset($menu_object)) {
      
      $user->contribute += array(
        'current_nid' => $menu_object->nid,
        'current_uid' => $menu_object->uid,
        'current_title' => $menu_object->title,
        'type' => $menu_object->type,
        'path_is_admin' => $path_is_admin,
      );
      
      /** primary author */
      if ($user->uid == $menu_object->uid) {
        $user->contribute += array(
          'contributor' => TRUE,
          'role' => 'primary author',
        );
      }
      /** admin, additional author or no privileges */
      else {
        /** Check if user is admin or an additional author **/
        if (in_array('administrator', $user->roles)) {
          $user->contribute += array(
            'contributor' => TRUE,
            'role' => 'administrator',
          );
        }
        else if (in_array($user->contribute['current_nid'], $user->contribute['spokes_can_contribute'])) {
          $user->contribute += array(
            'contributor' => TRUE,
            'role' => 'additional author',
          );
        }
        else {
          $user->contribute += array(
            'contributor' => FALSE,
            'role' => 'no-privilege',
          );
        }
      }
    }
  }
}

/**
 * Implementation of hook_perm().
 */
function mediacommons_editorialworkflow_permission() {
  return array(
    'access mediacommons content' => array(
      'title' => t('Access mediacommons content'),
      'description' => t(''), 
    ),
    'contribute content spoke' => array(
      'title' => t('Contribute spoke'),
      'description' => t(''), 
    ),
    'contribute content hub' => array(
      'title' => t('Contribute hubs'),
      'description' => t(''), 
    ),
    'promote hub content' => array(
      'title' => t('Promote hubs'),
      'description' => t(''), 
    ),
    'set current hub' => array(
      'title' => t('Set current hub'),
      'description' => t(''), 
    ),
    'set upcoming hub' => array(
      'title' => t('Set upcoming hub'),
      'description' => t(''), 
    ),
    'admin contributors content' => array(
      'title' => t('Admin contributors content'),
      'description' => t(''), 
    ),
    'access mediacommons dashboard' => array(
      'title' => t('Access mediacommons dashboard'),
      'description' => t(''), 
    ),
  );
}

function mediacommons_editorialworkflow_menu() {

  $items['admin/contribute'] = array(
    'title' => t('Contribute'),
    'page callback' => 'mediacommons_editorialworkflow_contribute_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'weight' => 1,
    'file' => 'inc/mediacommons_editorialworkflow.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/contribute/dashboard'] = array(
    'title' => t('Administrate site'),
    'description' => 'Manage users, set current hub and upcoming hubs.',
    'page callback' => 'mediacommons_editorialworkflow_admin_page',
    'page arguments' => array(1),
    'access arguments' => array('access dashboard'),
    'weight' => 3,
    'file' => 'inc/mediacommons_editorialworkflow.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/contribute/dashboard/set-current-hub'] = array(
    'title' => 'Set current cluster',
    'description' => 'Set current hub, selected item will be displayed in the frontpage.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediacommons_editorialworkflow_set_current_hub'),
    'access arguments' => array('set current hub'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'inc/mediacommons_editorialworkflow.pages.inc',
  );

  return $items;

}

function mediacommons_editorialworkflow_contributor() {
  global $user;
	
	$field = field_info_instances('node');
	$mediacommons_editorialworkflow_contributor = &drupal_static(__FUNCTION__, array());
	
	/** If content-type HUB or SPOKE exist and field_contributors exist in any of the 2 types continue */
	if ((isset($field['hub']) && isset($field['hub']['field_contributors'])) || (isset($field['spoke']) && isset($field['spoke']['field_contributors']))) {

    $query = new EntityFieldQuery;

    $result = $query
              ->entityCondition('entity_type', 'node')
              ->fieldCondition('field_contributors', 'uid', $user->uid, '=')
              ->execute();
							
    if (isset($result['node'])) {
      $mediacommons_editorialworkflow_contributor = array_keys($result['node']);
    }
		
	}

  return $mediacommons_editorialworkflow_contributor;

}

function mediacommons_editorialworkflow_hubs_user_can_contribute() {
  	
  global $user;
	
	$field = field_info_instances('node');

  $hubs_user_can_contribute = &drupal_static(__FUNCTION__, array());
	
	/** If content-type HUB or SPOKE exist and field_contributors exist in any of the 2 types continue */
	if ((isset($field['hub']) && isset($field['hub']['field_contributors']))) {	

    $query = new EntityFieldQuery;

    $result = $query
                ->entityCondition('entity_type', 'node')
                ->entityCondition('bundle', 'hub')
                ->fieldCondition('field_contributors', 'uid', $user->uid, '=')
                ->execute();

    if (isset($result['node'])) {
      $hubs_user_can_contribute = array_keys($result['node']);
    }

  }

  return $hubs_user_can_contribute;

}

function mediacommons_editorialworkflow_preprocess_button(&$variables) {
  
  global $user;
  
  if (isset($user->contribute)) {

    $element = &$variables['element'];
    
    if (
        $element['#type'] == 'submit' /** submit buttons */
        && 
        isset($user->contribute['current_nid']) /** is a node */ 
        && 
        $user->uid != $user->contribute['current_uid'] /** not the primary contributor */
        &&
        !in_array('administrator', $user->roles) /** not an administrator */
        &&
        !in_array($user->contribute['current_nid'], $user->contribute['spokes_can_contribute']) /** not a additional contributor */        
    ) {
      
      $element['#attributes'] = array(
        'disabled' => 'disabled',
        'class' => array('no-contributor-permission element-invisible')
      );

    }
    
    if (isset($element['#value']) && isset($element['#name'])) {    
      switch ($element['#name']) {
        case 'field_contributed_piece_add_more' :
          $element['#value'] = t('Add another spoke');
          break;

        case 'field_contributors_add_more' :
          $element['#value'] = t('Add another contributor');
          break;

        case 'field_additional_authors_add_more' :
          $element['#value'] = t('Add another author');
          break;

        case 'field_clusters_add_more' :
          $element['#value'] = t('Add another hub');
          break;
      }
    }
    
  }
}

function mediacommons_editorialworkflow_preprocess_container(&$variables) {
  global $user;
  
  if (isset($user->contribute)) {
    $element = &$variables['element'];
    if (isset($element['#id'])) {
      switch ($element['#id']) {
        case 'edit-field-video-embed-link' :
        case 'edit-field-representative-image' :
        case 'edit-field-tease-image' :
          $element['#attributes']['class'][] = 'invisible-element';
          break;
      }
    }
  }
}

function mediacommons_editorialworkflow_preprocess_textfield(&$variables) {
  global $user;
  
  if (isset($user->contribute)) {
    $element = &$variables['element'];
	  if ($element['#name'] == 'title') {
      $element['#attributes']['placeholder'] = t('Untitled');
    }
  }
}

function mediacommons_editorialworkflow_preprocess_checkbox(&$variables) {
  global $user;
  
  if (isset($user->contribute) && !in_array('administrator', $user->roles)) { 
    $element = &$variables['element'];
    
    if (isset($element['#parents']) && isset($element['#parents'][0]) && $element['#parents'][0] == 'field_clusters') {
      /** user have permission to add piece to this cluster */
      if (isset($element['#return_value']) && !in_array($element['#return_value'], $user->contribute['hubs_can_contribute'])) {
        
        $element['#attributes'] = array(
          'disabled' => 'disabled',
          'class' => array('no-contributor-permission')
        );
      }

      /** if is already checked and user is not the cluster manager; disable the field and mark as read-only */
      if ($element['#checked']) {
        $element['#attributes'] = array(
          'disabled' => 'disabled',
          'class' => array('disabled')
        );
      }
    }
  }
}

function mediacommons_editorialworkflow_add_assets() {
	$module_path = drupal_get_path('module', 'mediacommons_editorialworkflow');
    drupal_add_css($module_path . '/mediacommons_editorialworkflow.css', 'module');
    drupal_add_js($module_path . '/js/mediacommons_editorialworkflow.js', array('type' => 'file', 'group' => JS_DEFAULT,));
}

function mediacommons_editorialworkflow_form_hub_node_form_alter(&$form, &$form_state, $form_id) {
  
  /** Add CSS and JS files */
	mediacommons_editorialworkflow_add_assets();
	
  $field = field_get_items('node', $form['#node'], 'field_type');

  if (isset($field[0])) {
    switch ($field[0]['value']) {
      case 0 :
        $form['#attributes']['class'][] = 'node-hub-type-video';          
        break;
          
      case 1 :
        $form['#attributes']['class'][] = 'node-hub-type-image';
        break;
    }
  }
}
function mediacommons_editorialworkflow_preprocess_image_widget(&$variables) {
  $element = &$variables['element'];
}

function mediacommons_editorialworkflow_form_spoke_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  
  mediacommons_editorialworkflow_add_assets();
	
  /** indication of that this form was process by the editorial workflow module */
  $form['#attributes']['class'][] = 'contributor';
  
  if (isset($user->contribute['contributor'])) {
  	
    $form['#attributes']['class'][] = $user->contribute['role'];
		
    if ($user->contribute['contributor']) {
      drupal_set_message(t('Contributing as @contributor.', array('@contributor' => $user->contribute['role'])), 'status');
    }
		
    else {
      drupal_set_message(t('You are not allow to edit @title. If you are a contributor to this piece ask the primary author to add you as an additional author.', array('@title' => $user->contribute['current_title'])), 'warning');      
    }
		
  }
}